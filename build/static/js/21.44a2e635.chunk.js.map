{"version":3,"sources":["../node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js","layouts/minimal/components/topbar/topbar.component.tsx"],"names":["useMediaQuery","queryInput","options","arguments","length","undefined","theme","useTheme","props","getThemeProps","name","query","replace","supportMatchMedia","window","matchMedia","_props$options","_extends","_props$options$defaul","defaultMatches","_props$options$matchM","_props$options$noSsr","noSsr","_props$options$ssrMat","ssrMatchMedia","_React$useState","React","matches","match","setMatch","active","queryList","updateMatch","addListener","removeListener","Topbar","className","clsx","color","position","to","alt","process","title","src","smDown","variant"],"mappings":"+GAAA,sEAGe,SAASA,EAAcC,GACpC,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC9EG,EAAQC,cACRC,EAAQC,YAAc,CACxBH,MAAOA,EACPI,KAAM,mBACNF,MAAO,KAST,IAAIG,EAA8B,oBAAfV,EAA4BA,EAAWK,GAASL,EACnEU,EAAQA,EAAMC,QAAQ,eAAgB,IAKtC,IAAIC,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOC,WAEnEC,EAAiBC,YAAS,GAAIT,EAAON,GACrCgB,EAAwBF,EAAeG,eACvCA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAwBJ,EAAeD,WACvCA,OAAuC,IAA1BK,EAAmCP,EAAoBC,OAAOC,WAAa,KAAOK,EAC/FC,EAAuBL,EAAeM,MACtCA,OAAiC,IAAzBD,GAA0CA,EAClDE,EAAwBP,EAAeQ,cACvCA,OAA0C,IAA1BD,EAAmC,KAAOA,EAE1DE,EAAkBC,YAAe,WACnC,OAAIJ,GAAST,EACJE,EAAWJ,GAAOgB,QAGvBH,EACKA,EAAcb,GAAOgB,QAKvBR,KAELS,EAAQH,EAAgB,GACxBI,EAAWJ,EAAgB,GAoC/B,OAlCAC,aAAgB,WACd,IAAII,GAAS,EAEb,GAAKjB,EAAL,CAIA,IAAIkB,EAAYhB,EAAWJ,GAEvBqB,EAAc,WAIZF,GACFD,EAASE,EAAUJ,UAMvB,OAFAK,IACAD,EAAUE,YAAYD,GACf,WACLF,GAAS,EACTC,EAAUG,eAAeF,OAE1B,CAACrB,EAAOI,EAAYF,IAUhBe,I,iCCtFT,0EAoCeO,UA5BA,SAAC3B,GAAgB,IACvB4B,EAAc5B,EAAd4B,UAER,OACC,cAAC,IAAD,CAAQA,UAAWC,YAAK,aAAcD,GAAYE,MAAM,UAAUC,SAAS,QAA3E,SACC,cAAC,IAAD,UACC,eAAC,IAAD,CAAMC,GAAG,IAAT,UACC,qBACCJ,UAAU,MACVK,IAAKC,wBACLC,MAAOD,wBACPE,IAAKF,gCAEN,cAAC,IAAD,CAAQG,QAAM,EAAd,SACC,cAAC,IAAD,CAAYC,QAAQ,KAAKV,UAAU,QAAnC,SACEM","file":"static/js/21.44a2e635.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$matchM = _props$options.matchMedia,\n      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","import React from 'react';\n\nimport * as PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Toolbar, Typography, Hidden } from '@material-ui/core';\n\nconst Topbar = (props: any) => {\n\tconst { className } = props;\n\n\treturn (\n\t\t<AppBar className={clsx('app-header', className)} color=\"primary\" position=\"fixed\">\n\t\t\t<Toolbar>\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"img\"\n\t\t\t\t\t\talt={process.env.REACT_APP_NAME}\n\t\t\t\t\t\ttitle={process.env.REACT_APP_NAME}\n\t\t\t\t\t\tsrc={process.env.REACT_APP_LOGO}\n\t\t\t\t\t/>\n\t\t\t\t\t<Hidden smDown>\n\t\t\t\t\t\t<Typography variant=\"h6\" className=\"title\">\n\t\t\t\t\t\t\t{process.env.REACT_APP_NAME}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Hidden>\n\t\t\t\t</Link>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n};\n\nTopbar.propTypes = {\n\tclassName: PropTypes.string,\n};\n\nexport default Topbar;\n"],"sourceRoot":""}